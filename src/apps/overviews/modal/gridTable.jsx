/**

# Component (deployment use)

# GridTable
    
## Description  

[component that creates a table with the data in the form of columns that is displayed in the modal]

## Category   
    
Visual

## Live demo 
[-]

## Installation 
[-]

## Usage 
'''
  <GridTable columns={_jtGenes.columns} data={_jtGenes.data} />
'''
## Props 

| Attribute | Type | Default | Description |
| --------- | ---- | ------- | ----------- |
|columns | array   | undefined   | columns to display|
| data | array   | undefined   | data displayed in column cells|

## Exception

__Category: [Error, Warning or Message]__
[Description of the exception (if necessary)]

## License

MIT License

## Author 
    
RegulonDB Team: 
[
  nombre    <>
  Elizabeth Ochoa Praxedis  <elizabethochoap23@gmail.com>
  Gabriel Alarcon Carranza  <galarcon@ccg.unam.mx>
]

# Component (development use)

## Component Type 

    Simple Component
  [Simple Component,Stateful Component,An Application]

## Dependencies

'''
import React from 'react'
import Style from "./table.module.css"
import { useTable, useBlockLayout } from 'react-table'
import { FixedSizeList } from 'react-window'
import { Link } from 'react-router-dom'
import PropTypes from 'prop-types'
'''

## States
    
| Property | Type | Default | Description |
| --------- | ---- | ------- | ----------- |



# Functions description

## [name]

__Description:__  


__Usage:__

__Scope: __

[Scope details]

__Input Parameter:__  
 __vale__ [Description]

__Return:__  
 __value__ [Description]

 * 
 */

import React from 'react'
import Style from "./table.module.css"
import { useTable, useBlockLayout } from 'react-table'
import { FixedSizeList } from 'react-window'
import { Link } from 'react-router-dom'
import PropTypes from 'prop-types'
/**
 * Function that calculates the width of the scroll generated by the table.
 * thanks too https://davidwalsh.name/detect-scrollbar-width
 * @returns {number} scrollbarWidth - width of the scroll
 */
const scrollbarWidth = () => {
    const scrollDiv = document.createElement('div')
    scrollDiv.setAttribute('style', 'width: 100px; height: 100px; overflow: scroll; position:absolute; top:-9999px;')
    document.body.appendChild(scrollDiv)
    const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    document.body.removeChild(scrollDiv)
    return scrollbarWidth
}

/**
 * Component that is responsible for creating the table that is displayed in the modal, 
 * returning the cells with the data
 * @param {array} columns -columns to display
 * @param {array} data -data displayed in column cells
 * @returns {ReactElement} 
 */
export default function Table({ columns, data }) {
    // Use the state and functions returned from useTable to build your UI

    const defaultColumn = React.useMemo(
        () => ({
            width: 150,
        }),
        []
    )

    const scrollBarSize = React.useMemo(() => scrollbarWidth(), [])

    const {
        getTableProps,
        getTableBodyProps,
        rows,
        totalColumnsWidth,
        prepareRow,
    } = useTable(
        {
            columns,
            data,
            defaultColumn,
        },
        useBlockLayout
    )
    
    // Renders a data row
    const RenderRow = React.useCallback(
        ({ index, style }) => {
            const row = rows[index]
            prepareRow(row)
            return (
                <div
                    {...row.getRowProps({
                        style,
                    })}
                    className="tr"
                >
                    {row.cells.map(cell => {
                        //console.log(cell.value)
                        return (
                            <div {...cell.getCellProps()} className="td">
                                {cell.value?._id && (
                                    <Link to={"/"+cell.value.type+"/" + cell.value._id} >
                                        <div className={Style.cell_content} >
                                            <div>
                                                <p style={{ fontSize: "8px" }} >{cell.value._id}</p>
                                            </div>
                                            <div>
                                                <p  style={{ fontSize: "16px" }} dangerouslySetInnerHTML={{__html: cell.value.name}} />
                                            </div>
                                        </div>
                                    </Link>
                                )}
                                    <div className={Style.cell_content} >
                                        <div>
                                            <p style={{ fontSize: "8px" }} ></p>
                                        </div>
                                        <div>
                                            <p></p>
                                        </div>
                                    </div>
                            </div>
                        )
                    })}
                </div>
            )
        },
        [prepareRow, rows]
    )

    // Render the UI for your table
    return (
        <div {...getTableProps()}>
            <div>

            </div>
            <div className={Style.table_content} {...getTableBodyProps()}>
                <FixedSizeList
                    height={200}
                    itemCount={rows.length}
                    itemSize={50}
                    width={totalColumnsWidth + scrollBarSize}
                >
                    {RenderRow}
                </FixedSizeList>
            </div>
        </div>
    )
}

 Table.propTypes = {
    columns: PropTypes.array,
    data: PropTypes.array
  }
  
  Table.defaultProps = {
    columns:  [],
    data: [],
  }